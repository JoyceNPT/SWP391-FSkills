/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller;

import dao.AnnouncementDAO;
import model.Announcement;
import model.User;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.sql.Timestamp;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.UUID; // For unique file names

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.servlet.http.Part;

/**
 *
 * @author Hua Khanh Duy - CE180230 - SE1814
 */
@MultipartConfig(
    fileSizeThreshold = 1024 * 1024 * 2, // 2MB
    maxFileSize = 1024 * 1024 * 10,     // 10MB
    maxRequestSize = 1024 * 1024 * 50   // 50MB
)
@WebServlet(name = "AnnouncementServlet", urlPatterns = {"/admin/announcement"})
public class AnnouncementServlet extends HttpServlet {

    private static final String UPLOAD_DIRECTORY = "imageUpload"; // Subdirectory to store images within the web app

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        // This method is not used in the optimized version as doGet/doPost handle requests directly.
        // It's usually a placeholder generated by NetBeans.
    }

    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession();
        String action = request.getParameter("action");
        User user = (User) session.getAttribute("user");
        AnnouncementDAO announcementDAO = new AnnouncementDAO();

        // Check if user is logged in (optional: add role check if only admin can access)
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/login"); // Redirect to login page
            return;
        }

        if (action == null) {
            action = "listAnnouncement"; // Default action is to list announcements
        }

        switch (action) {
            case "listAnnouncement":
                try {
                    List<Announcement> listAnnouncement = announcementDAO.getAll();
                    request.setAttribute("AccountInfo", user); // Keep user info for JSP
                    request.setAttribute("listAnnouncement", listAnnouncement);
                    // Original path: /WEB-INF/views/announcement.jsp
                    request.getRequestDispatcher("/WEB-INF/views/announcement.jsp").forward(request, response);
                } catch (Exception e) {
                    log("Error listing announcements: " + e.getMessage(), e);
                    request.setAttribute("errorMessage", "Error loading announcements.");
                    // Using a general error page if specific fail pages are not provided for GET requests
                    request.getRequestDispatcher("/WEB-INF/views/error.jsp").forward(request, response);
                }
                break;

            case "details":
                String idRaw = request.getParameter("id");
                try {
                    int id = Integer.parseInt(idRaw);
                    Announcement ann = announcementDAO.getAnnouncementById(id);
                    if (ann != null) {
                        request.setAttribute("dataAnn", ann);
                        // Original path: /WEB-INF/views/announcementDetails.jsp
                        request.getRequestDispatcher("/WEB-INF/views/announcementDetails.jsp").forward(request, response);
                    } else {
                        response.sendError(HttpServletResponse.SC_NOT_FOUND, "Announcement not found.");
                    }
                } catch (NumberFormatException e) {
                    log("Invalid announcement ID format: " + idRaw, e);
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid announcement ID format.");
                } catch (Exception e) {
                    log("Error fetching announcement details: " + e.getMessage(), e);
                    request.setAttribute("errorMessage", "Error loading announcement details.");
                    request.getRequestDispatcher("/WEB-INF/views/error.jsp").forward(request, response);
                }
                break;

            // *** The original code didn't have explicit forms for Create/Edit
            // *** If you want to use forms like createAnnouncement.jsp or editAnnouncement.jsp,
            // *** you would add actions like "showCreateForm" and "showEditForm" here
            // *** and dispatch to those JSPs.
            // *** For now, I'm sticking to the original logic which implies forms might be part of list page
            // *** or directly submitting to POST without a separate GET for form display.

            default:
                // If action is unknown for GET, redirect to list or show error
                response.sendError(HttpServletResponse.SC_NOT_FOUND, "Invalid action for GET request.");
                break;
        }
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getParameter("action");
        AnnouncementDAO announcementDAO = new AnnouncementDAO();
        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("user");

        // Check if user is logged in
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }

        switch (action) {
            case "create":
                handleCreateAnnouncement(request, response, announcementDAO, user);
                break;
            case "edit":
                handleEditAnnouncement(request, response, announcementDAO);
                break;
            case "delete":
                handleDeleteAnnouncement(request, response, announcementDAO);
                break;
            default:
                response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid action for POST request.");
                break;
        }
    }

    // --- Helper methods for POST actions ---

    private void handleCreateAnnouncement(HttpServletRequest request, HttpServletResponse response, AnnouncementDAO announcementDAO, User user)
            throws ServletException, IOException {
        String announcementTitle = request.getParameter("announcementTitle");
        String announcementText = request.getParameter("announcementText");
        String takeDownDateStr = request.getParameter("takeDownDate");

        String imagePath = null;
        try {
            Part filePart = request.getPart("announcementImage"); // "announcementImage" is the name of the file input
            String submittedFileName = Paths.get(filePart.getSubmittedFileName()).getFileName().toString();

            if (submittedFileName != null && !submittedFileName.isEmpty()) {
                // Generate unique file name
                String fileExtension = "";
                int dotIndex = submittedFileName.lastIndexOf('.');
                if (dotIndex > 0 && dotIndex < submittedFileName.length() - 1) {
                    fileExtension = submittedFileName.substring(dotIndex);
                }
                String uniqueFileName = UUID.randomUUID().toString() + fileExtension;

                // Define upload path
                // Using getRealPath("") will put it under the deployed WAR/exploded directory.
                // Be aware that files here can be lost on redeploy.
                String uploadPath = getServletContext().getRealPath("") + File.separator + UPLOAD_DIRECTORY;
                File uploadDir = new File(uploadPath);
                if (!uploadDir.exists()) {
                    uploadDir.mkdirs(); // Use mkdirs() to create parent directories if needed
                }

                // Write file to disk
                filePart.write(uploadPath + File.separator + uniqueFileName);
                imagePath = UPLOAD_DIRECTORY + "/" + uniqueFileName; // Store relative path
            } else {
                imagePath = "No Image"; // Or could save NULL to DB if column allows NULL
            }

            // Convert TakeDownDate string to Timestamp safely
            Timestamp takeDownTimestamp = null; // Declare timestamp variable
            if (takeDownDateStr != null && !takeDownDateStr.trim().isEmpty()) {
                try {
                    // Format for datetime-local input is "yyyy-MM-ddTHH:mm"
                    // Need to append ":00" for seconds to match Timestamp.valueOf format
                    takeDownTimestamp = Timestamp.valueOf(takeDownDateStr.replace("T", " ") + ":00");
                } catch (IllegalArgumentException e) {
                    log("Invalid TakeDownDate format during create: " + takeDownDateStr, e);
                    request.setAttribute("err", "<p>Invalid Take Down Date format. Please use YYYY-MM-DDTHH:MM.</p>");
                    // Original: request.getRequestDispatcher("fail12.jsp").forward(request, response);
                    request.getRequestDispatcher("/WEB-INF/views/fail12.jsp").forward(request, response);
                    return; // Stop further processing
                }
            }
            // UserID is taken from the logged-in session user
            int userID = user.getUserId();

            // Insert into database
            // Note: Your DAO's insert method still takes a String for TakeDownDate,
            // so we pass takeDownDateStr back. Make sure your DAO handles null/empty strings gracefully if applicable.
            int res = announcementDAO.insert(announcementTitle, announcementText, takeDownDateStr, imagePath, userID);

            if (res == 1) {
                response.sendRedirect(request.getContextPath() + "/admin/announcement?action=listAnnouncement");
            } else {
                request.setAttribute("err", "<p>Create failed</p>");
                // Original: request.getRequestDispatcher("fail12.jsp").forward(request, response);
                request.getRequestDispatcher("/WEB-INF/views/fail12.jsp").forward(request, response);
            }
        } catch (Exception e) {
            log("Error creating announcement: " + e.getMessage(), e);
            request.setAttribute("err", "<p>An error occurred while creating the announcement: " + e.getMessage() + "</p>");
            // Original: request.getRequestDispatcher("fail23.jsp").forward(request, response);
            request.getRequestDispatcher("/WEB-INF/views/fail23.jsp").forward(request, response);
        }
    }

    private void handleEditAnnouncement(HttpServletRequest request, HttpServletResponse response, AnnouncementDAO announcementDAO)
            throws ServletException, IOException {
        String announcementId = request.getParameter("announcementId");
        String announcementTitle = request.getParameter("announcementTitle");
        String announcementText = request.getParameter("announcementText");
        String rawDate = request.getParameter("takeDownDate");
        String oldImagePath = request.getParameter("oldImagePath"); // Get old image path

        String imagePathToSave = oldImagePath; // Default to old image path

        try {
            Part filePart = request.getPart("announcementImage");
            String submittedFileName = Paths.get(filePart.getSubmittedFileName()).getFileName().toString();

            if (submittedFileName != null && !submittedFileName.isEmpty()) {
                // New image uploaded
                String fileExtension = "";
                int dotIndex = submittedFileName.lastIndexOf('.');
                if (dotIndex > 0 && dotIndex < submittedFileName.length() - 1) {
                    fileExtension = submittedFileName.substring(dotIndex);
                }
                String uniqueFileName = UUID.randomUUID().toString() + fileExtension;

                String uploadPath = getServletContext().getRealPath("") + File.separator + UPLOAD_DIRECTORY;
                File uploadDir = new File(uploadPath);
                if (!uploadDir.exists()) {
                    uploadDir.mkdirs();
                }

                filePart.write(uploadPath + File.separator + uniqueFileName);
                imagePathToSave = UPLOAD_DIRECTORY + "/" + uniqueFileName;

                // Optional: Delete old image if a new one is uploaded and oldImagePath is valid
                if (oldImagePath != null && !oldImagePath.isEmpty() && !oldImagePath.equals("No Image")) {
                    File oldFile = new File(getServletContext().getRealPath("") + File.separator + oldImagePath);
                    if (oldFile.exists() && oldFile.isFile()) {
                        if (oldFile.delete()) {
                            log("Old image deleted: " + oldImagePath);
                        } else {
                            log("Failed to delete old image: " + oldImagePath);
                        }
                    }
                }
            } else {
                // No new image uploaded, keep oldImagePath
                // If oldImagePath was null/empty and no new image, ensure it becomes "No Image" if that's your default
                if (oldImagePath == null || oldImagePath.isEmpty()) {
                     imagePathToSave = "No Image";
                }
            }

            // Your DAO's update method still takes a String for TakeDownDate
            // Ensure this format is consistent with what your DAO expects
            String formattedDate = rawDate != null ? rawDate.replace("T", " ") + ":00" : null;

            boolean res = announcementDAO.update(announcementTitle, announcementText, formattedDate, imagePathToSave, announcementId);

            if (res) {
                response.sendRedirect(request.getContextPath() + "/admin/announcement?action=listAnnouncement");
            } else {
                // Original: response.sendRedirect("failqq.jsp");
                request.setAttribute("errorMessage", "Failed to update announcement. Please try again.");
                request.getRequestDispatcher("/WEB-INF/views/failqq.jsp").forward(request, response);
            }
        } catch (Exception e) {
            log("Error updating announcement: " + e.getMessage(), e);
            // Original: response.sendRedirect("failbb.jsp");
            request.setAttribute("errorMessage", "An error occurred while updating the announcement: " + e.getMessage());
            request.getRequestDispatcher("/WEB-INF/views/failbb.jsp").forward(request, response);
        }
    }

    private void handleDeleteAnnouncement(HttpServletRequest request, HttpServletResponse response, AnnouncementDAO announcementDAO)
            throws ServletException, IOException {
        String idRaw = request.getParameter("id");
        try {
            int id = Integer.parseInt(idRaw);
            
            // Optional: Get image path before deleting announcement from DB to delete physical file
            Announcement annToDelete = announcementDAO.getAnnouncementById(id);
            String imagePath = (annToDelete != null) ? annToDelete.getAnnouncementImage() : null;

            if (announcementDAO.delete(id) == 1) {
                // Delete physical image file if it exists and is not "No Image"
                if (imagePath != null && !imagePath.isEmpty() && !imagePath.equals("No Image")) {
                    File imageFile = new File(getServletContext().getRealPath("") + File.separator + imagePath);
                    if (imageFile.exists() && imageFile.isFile()) {
                        if (imageFile.delete()) {
                            log("Successfully deleted image file: " + imagePath);
                        } else {
                            log("Failed to delete image file: " + imagePath);
                        }
                    } else {
                        log("Image file not found or is not a file: " + imagePath);
                    }
                }
                response.sendRedirect(request.getContextPath() + "/admin/announcement?action=listAnnouncement");
            } else {
                // Original: response.sendRedirect("failss.jsp");
                request.setAttribute("errorMessage", "Failed to delete announcement.");
                request.getRequestDispatcher("/WEB-INF/views/failss.jsp").forward(request, response);
            }
        } catch (NumberFormatException e) {
            log("Invalid ID for delete action: " + idRaw, e);
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid announcement ID format for deletion.");
        } catch (Exception e) {
            log("Error deleting announcement: " + e.getMessage(), e);
            request.setAttribute("errorMessage", "An error occurred while deleting the announcement: " + e.getMessage());
            // Original: PrintWriter out = response.getWriter(); out.print(e.getMessage());
            // Using error.jsp or a relevant fail page for consistency
            request.getRequestDispatcher("/WEB-INF/views/error.jsp").forward(request, response);
        }
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Admin Servlet for managing announcements.";
    }
}